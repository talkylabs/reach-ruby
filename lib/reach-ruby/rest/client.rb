###
#  This code was generated by
#  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___ 
# | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
# |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
# |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
# 
#  NOTE: This class is auto generated by OpenAPI Generator.
#  https://openapi-generator.tech
#  Do not edit the class manually.
#
# frozen_string_literal: true

module Reach
  module REST
    ##
    # A client for accessing the Reach API.
    class Client

      attr_accessor :http_client, :username, :password, :auth_token, :logger, :user_agent_extensions

      ##
      # Initializes the Reach Client
      def initialize(username=nil, password=nil, http_client=nil, logger=nil, user_agent_extensions=nil)
        @username = username || Reach.username
        @password = password || Reach.auth_token
        @auth_token = @password
        @auth = [@username, @password]
        @http_client = http_client || Reach.http_client || Reach::HTTP::Client.new
        @logger = logger || Reach.logger
        @user_agent_extensions = user_agent_extensions || []

        # Domains
        @api = nil
      end

      ##
      # Makes a request to the Reach API using the configured http client
      # Authentication information is automatically added if none is provided
      def request(host, port, method, uri, params={}, data={}, headers={}, auth=nil, timeout=nil)
        auth ||= @auth

        ruby_config = RbConfig::CONFIG
        headers['User-Agent'] = "reach-ruby/#{Reach::VERSION} (#{ruby_config["host_os"]} #{ruby_config["host_cpu"]}) Ruby/#{RUBY_VERSION}"
        headers['Accept-Charset'] = 'utf-8'

        user_agent_extensions.each { |extension| headers['User-Agent'] += " #{extension}" }

        if method == 'POST' && !headers['Content-Type']
          headers['Content-Type'] = 'application/x-www-form-urlencoded'
        end

        unless headers['Accept']
          headers['Accept'] = 'application/json'
        end

        uri = build_uri(uri)

        if @logger
          @logger.debug("--BEGIN REACH API Request--")
          @logger.debug("Request Method: <#{method}>")

          headers.each do |key, value|
            unless key.downcase == 'authorization' || key.downcase == 'apikey' || key.downcase == 'apiuser'
              @logger.debug("#{key}:#{value}")
            end
          end

          url = URI(uri)
          @logger.debug("Host:#{url.host}")
          @logger.debug("Path:#{url.path}")
          @logger.debug("Query:#{url.query}")
          @logger.debug("Request Params:#{params}")
        end

        response = @http_client.request(
          host,
          port,
          method,
          uri,
          params,
          data,
          headers,
          auth,
          timeout
        )

        if @logger
          @logger.debug("Response Status Code:#{response.status_code}")
          @logger.debug("Response Headers:#{response.headers}")
          @logger.debug("--END REACH API REQUEST--")
        end

        response
      end

      ##
      # Build the final request uri
      def build_uri(uri)
        parsed_url = URI(uri)
        parsed_url.to_s
      end

      ##
      # Access the Api Reach Domain
      def api
        @api ||= Api.new self
      end

      ##
      # Acess the Messaging api version
      def messaging
        self.api.messaging
      end

      ##
      # Acess the Authentix api version
      def authentix
        self.api.authentix
      end

      ##
      # Provide a user friendly representation
      def to_s
        "#<Reach::REST::Client #{@username}>"
      end
    end

  end
end
