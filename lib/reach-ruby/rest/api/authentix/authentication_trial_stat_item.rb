##
#    This code was generated by
#  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___ 
# | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
# |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
# |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
# 
#    Reach Authentix API
#     Reach Authentix API helps you easily integrate user authentification in your application. The authentification allows to verify that a user is indeed at the origin of a request from your application.  At the moment, the Reach Authentix API supports the following channels:    * SMS      * Email   We are continuously working to add additionnal channels. ## Base URL All endpoints described in this documentation are relative to the following base URL: ``` https://api.reach.talkylabs.com/rest/authentix/v1/ ```  The API is provided over HTTPS protocol to ensure data privacy.  ## API Authentication Requests made to the API must be authenticated. You need to provide the `ApiUser` and `ApiKey` associated with your applet. This information could be found in the settings of the applet. ```curl curl -X GET [BASE_URL]/configurations -H \"ApiUser:[Your_Api_User]\" -H \"ApiKey:[Your_Api_Key]\" ``` ## Reach Authentix API Workflow Three steps are needed in order to authenticate a given user using the Reach Authentix API. ### Step 1: Create an Authentix configuration A configuration is a set of settings used to define and send an authentication code to a user. This includes, for example: ```   - the length of the authentication code,    - the message template,    - and so on... ``` A configuaration could be created via the web application or directly using the Reach Authentix API. This step does not need to be performed every time one wants to use the Reach Authentix API. Indeed, once created, a configuartion could be used to authenticate several users in the future.    ### Step 2: Send an authentication code A configuration is used to send an authentication code via a selected channel to a user. For now, the supported channels are `sms`, and `email`. We are working hard to support additional channels. Newly created authentications will have a status of `awaiting`. ### Step 3: Verify the authentication code This step allows to verify that the code submitted by the user matched the one sent previously. If, there is a match, then the status of the authentication changes from `awaiting` to `passed`. Otherwise, the status remains `awaiting` until either it is verified or it expires. In the latter case, the status becomes `expired`. 
#
#    NOTE: This class is auto generated by OpenAPI Generator.
#    https://openapi-generator.tech
#    Do not edit the class manually.
#


module Reach
    module REST
        class Api
            class Authentix < Version
                class AuthenticationTrialStatItemList < ListResource
                    ##
                    # Initialize the AuthenticationTrialStatItemList
                    # @param [Version] version Version that contains the resource
                    # @return [AuthenticationTrialStatItemList] AuthenticationTrialStatItemList
                    def initialize(version)
                        super(version)
                        # Path Solution
                        @solution = {  }
                        
                        
                    end
                


                    # Provide a user friendly representation
                    def to_s
                        '#<Reach.Api.Authentix.AuthenticationTrialStatItemList>'
                    end
                end


                class AuthenticationTrialStatItemContext < InstanceContext
                    ##
                    # Initialize the AuthenticationTrialStatItemContext
                    # @param [Version] version Version that contains the resource
                    # @return [AuthenticationTrialStatItemContext] AuthenticationTrialStatItemContext
                    def initialize(version)
                        super(version)

                        # Path Solution
                        @solution = {  }
                        @uri = "/authentix/v1/authenticationTrialStats"

                        
                    end
                    ##
                    # Fetch the AuthenticationTrialStatItemInstance
                    # @param [String] dest Filter authentication trials sent only to this phone number or email. The phone number must be in the E.164 format.
                    # @param [String] trial_status Filter authentication trials with the specified status.
                    # @param [String] channel Filter authentication trials sent via the specified channel.
                    # @param [String] configuration_id Filter authentication trials from the configuration whose ID matches the specified one.
                    # @param [String] authentication_id Filter authentication trials from the authentication whose ID matches the specified one.
                    # @param [String] country Filter authentication trials sent to the specified destination country (in ISO 3166-1 alpha-2). Only possible when `dest` is a phone number.
                    # @param [Time] sent_at Filter authentication trials created at the specified date. Must be in ISO 8601 format.
                    # @param [Time] sent_after Filter authentication trials created after the specified datetime. Must be in ISO 8601 format.
                    # @param [Time] sent_before Filter authentication trials created before the specified datetime. Must be in ISO 8601 format.
                    # @return [AuthenticationTrialStatItemInstance] Fetched AuthenticationTrialStatItemInstance
                    def fetch(
                        dest: :unset, 
                        trial_status: :unset, 
                        channel: :unset, 
                        configuration_id: :unset, 
                        authentication_id: :unset, 
                        country: :unset, 
                        sent_at: :unset, 
                        sent_after: :unset, 
                        sent_before: :unset
                    )

                        baseParams = {
                        }
                        params = Reach::Values.of(baseParams.merge({
                        
                            'dest' => dest,
                            'trialStatus' => trial_status,
                            'channel' => channel,
                            'configurationId' => configuration_id,
                            'authenticationId' => authentication_id,
                            'country' => country,
                            'sentAt' => Reach.serialize_iso8601_datetime(sent_at),
                            'sentAfter' => Reach.serialize_iso8601_datetime(sent_after),
                            'sentBefore' => Reach.serialize_iso8601_datetime(sent_before),
                        }))
                        
                        
                        payload = @version.fetch('GET', @uri, params: params)
                        AuthenticationTrialStatItemInstance.new(
                            @version,
                            payload,
                        )
                    end


                    ##
                    # Provide a user friendly representation
                    def to_s
                        context = @solution.map{|k, v| "#{k}: #{v}"}.join(',')
                        "#<Reach.Api.Authentix.AuthenticationTrialStatItemContext #{context}>"
                    end

                    ##
                    # Provide a detailed, user friendly representation
                    def inspect
                        context = @solution.map{|k, v| "#{k}: #{v}"}.join(',')
                        "#<Reach.Api.Authentix.AuthenticationTrialStatItemContext #{context}>"
                    end
                end

                class AuthenticationTrialStatItemPage < Page
                    ##
                    # Initialize the AuthenticationTrialStatItemPage
                    # @param [String] baseUrl url without pagination info
                    # @param [Version] version Version that contains the resource
                    # @param [Response] response Response from the API
                    # @param [Hash] solution Path solution for the resource
                    # @return [AuthenticationTrialStatItemPage] AuthenticationTrialStatItemPage
                    def initialize(baseUrl, version, response, solution)
                        super(baseUrl, version, response)

                        # Path Solution
                        @solution = solution
                    end

                    ##
                    # Build an instance of AuthenticationTrialStatItemInstance
                    # @param [Hash] payload Payload response from the API
                    # @return [AuthenticationTrialStatItemInstance] AuthenticationTrialStatItemInstance
                    def get_instance(payload)
                        AuthenticationTrialStatItemInstance.new(@version, payload)
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        '<Reach.Api.Authentix.AuthenticationTrialStatItemPage>'
                    end
                end
                class AuthenticationTrialStatItemInstance < InstanceResource
                    ##
                    # Initialize the AuthenticationTrialStatItemInstance
                    # @param [Version] version Version that contains the resource
                    # @param [Hash] payload payload that contains response from Reach(TalkyLabs)
                    # @param [String] account_sid The SID of the
                    #   Account that created this AuthenticationTrialStatItem
                    #   resource.
                    # @param [String] sid The SID of the Call resource to fetch.
                    # @return [AuthenticationTrialStatItemInstance] AuthenticationTrialStatItemInstance
                    def initialize(version, payload )
                        super(version)
                        
                        # Marshaled Properties
                        @properties = { 
                            'appletId' => payload['appletId'],
                            'apiVersion' => payload['apiVersion'],
                            'totalTrials' => payload['totalTrials'] == nil ? payload['totalTrials'] : payload['totalTrials'].to_i,
                            'numSuccessfulTrials' => payload['numSuccessfulTrials'] == nil ? payload['numSuccessfulTrials'] : payload['numSuccessfulTrials'].to_i,
                            'numUnsuccessfulTrials' => payload['numUnsuccessfulTrials'] == nil ? payload['numUnsuccessfulTrials'] : payload['numUnsuccessfulTrials'].to_i,
                            'successRate' => payload['successRate'],
                        }

                        # Context
                        @instance_context = nil
                        @params = {  }
                    end

                    ##
                    # Generate an instance context for the instance, the context is capable of
                    # performing various actions.  All instance actions are proxied to the context
                    # @return [AuthenticationTrialStatItemContext] CallContext for this CallInstance
                    def context
                        unless @instance_context
                            @instance_context = AuthenticationTrialStatItemContext.new(@version )
                        end
                        @instance_context
                    end
                    
                    ##
                    # @return [String] The identifier of the applet.
                    def appletId
                        @properties['appletId']
                    end
                    
                    ##
                    # @return [String] The API version.
                    def apiVersion
                        @properties['apiVersion']
                    end
                    
                    ##
                    # @return [String] The total number of trials matching the specified criteria.
                    def totalTrials
                        @properties['totalTrials']
                    end
                    
                    ##
                    # @return [String] The total number of successfull trials among the ones matching the specified criteria.
                    def numSuccessfulTrials
                        @properties['numSuccessfulTrials']
                    end
                    
                    ##
                    # @return [String] The total number of unsuccessfull trials among the ones matching the specified criteria.
                    def numUnsuccessfulTrials
                        @properties['numUnsuccessfulTrials']
                    end
                    
                    ##
                    # @return [Float] The success rate of the trials matching the specified criteria.
                    def successRate
                        @properties['successRate']
                    end
                    
                    ##
                    # Fetch the AuthenticationTrialStatItemInstance
                    # @param [String] dest Filter authentication trials sent only to this phone number or email. The phone number must be in the E.164 format.
                    # @param [String] trial_status Filter authentication trials with the specified status.
                    # @param [String] channel Filter authentication trials sent via the specified channel.
                    # @param [String] configuration_id Filter authentication trials from the configuration whose ID matches the specified one.
                    # @param [String] authentication_id Filter authentication trials from the authentication whose ID matches the specified one.
                    # @param [String] country Filter authentication trials sent to the specified destination country (in ISO 3166-1 alpha-2). Only possible when `dest` is a phone number.
                    # @param [Time] sent_at Filter authentication trials created at the specified date. Must be in ISO 8601 format.
                    # @param [Time] sent_after Filter authentication trials created after the specified datetime. Must be in ISO 8601 format.
                    # @param [Time] sent_before Filter authentication trials created before the specified datetime. Must be in ISO 8601 format.
                    # @return [AuthenticationTrialStatItemInstance] Fetched AuthenticationTrialStatItemInstance
                    def fetch(
                        dest: :unset, 
                        trial_status: :unset, 
                        channel: :unset, 
                        configuration_id: :unset, 
                        authentication_id: :unset, 
                        country: :unset, 
                        sent_at: :unset, 
                        sent_after: :unset, 
                        sent_before: :unset
                    )

                        context.fetch(
                            dest: dest, 
                            trial_status: trial_status, 
                            channel: channel, 
                            configuration_id: configuration_id, 
                            authentication_id: authentication_id, 
                            country: country, 
                            sent_at: sent_at, 
                            sent_after: sent_after, 
                            sent_before: sent_before, 
                        )
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
                        "<Reach.Api.Authentix.AuthenticationTrialStatItemInstance #{values}>"
                    end

                    ##
                    # Provide a detailed, user friendly representation
                    def inspect
                        values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
                        "<Reach.Api.Authentix.AuthenticationTrialStatItemInstance #{values}>"
                    end
                end

            end
        end
    end
end
