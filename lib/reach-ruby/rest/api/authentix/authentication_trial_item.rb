##
#    This code was generated by
#  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___ 
# | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
# |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
# |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
# 
#    Reach Authentix API
#     Reach Authentix API helps you easily integrate user authentification in your application. The authentification allows to verify that a user is indeed at the origin of a request from your application.  At the moment, the Reach Authentix API supports the following channels:    * SMS      * Email   We are continuously working to add additionnal channels. ## Base URL All endpoints described in this documentation are relative to the following base URL: ``` https://api.reach.talkylabs.com/rest/authentix/v1/ ```  The API is provided over HTTPS protocol to ensure data privacy.  ## API Authentication Requests made to the API must be authenticated. You need to provide the `ApiUser` and `ApiKey` associated with your applet. This information could be found in the settings of the applet. ```curl curl -X GET [BASE_URL]/configurations -H \"ApiUser:[Your_Api_User]\" -H \"ApiKey:[Your_Api_Key]\" ``` ## Reach Authentix API Workflow Three steps are needed in order to authenticate a given user using the Reach Authentix API. ### Step 1: Create an Authentix configuration A configuration is a set of settings used to define and send an authentication code to a user. This includes, for example: ```   - the length of the authentication code,    - the message template,    - and so on... ``` A configuaration could be created via the web application or directly using the Reach Authentix API. This step does not need to be performed every time one wants to use the Reach Authentix API. Indeed, once created, a configuartion could be used to authenticate several users in the future.    ### Step 2: Send an authentication code A configuration is used to send an authentication code via a selected channel to a user. For now, the supported channels are `sms`, and `email`. We are working hard to support additional channels. Newly created authentications will have a status of `awaiting`. ### Step 3: Verify the authentication code This step allows to verify that the code submitted by the user matched the one sent previously. If, there is a match, then the status of the authentication changes from `awaiting` to `passed`. Otherwise, the status remains `awaiting` until either it is verified or it expires. In the latter case, the status becomes `expired`. 
#
#    NOTE: This class is auto generated by OpenAPI Generator.
#    https://openapi-generator.tech
#    Do not edit the class manually.
#


module Reach
    module REST
        class Api
            class Authentix < Version
                class AuthenticationTrialItemList < ListResource
                    ##
                    # Initialize the AuthenticationTrialItemList
                    # @param [Version] version Version that contains the resource
                    # @return [AuthenticationTrialItemList] AuthenticationTrialItemList
                    def initialize(version)
                        super(version)
                        # Path Solution
                        @solution = {  }
                        @uri = "/authentix/v1/authenticationTrials"
                        
                    end
                
                    ##
                    # Lists AuthenticationTrialItemInstance records from the API as a list.
                    # Unlike stream(), this operation is eager and will load `limit` records into
                    # memory before returning.
                    # @param [String] dest Retrieve authentication trials sent only to this phone number or email. The phone number must be in the E.164 format.
                    # @param [String] trial_status Retrieve authentication trials with the specified status.
                    # @param [String] channel Retrieve authentication trials sent via the specified channel.
                    # @param [String] configuration_id Retrieve authentication trials from the configuration whose ID matches the specified one.
                    # @param [String] authentication_id Retrieve authentication trials from the authentication whose ID matches the specified one.
                    # @param [String] country Retrieve authentication trials sent to the specified destination country (in ISO 3166-1 alpha-2). Only possible when `dest` is a phone number.
                    # @param [Time] sent_at Retrieve only authentication trials created at the specified date. Must be in ISO 8601 format.
                    # @param [Time] sent_after Retrieve only authentication trials created after the specified datetime. Must be in ISO 8601 format.
                    # @param [Time] sent_before Retrieve only authentication trials created before the specified datetime. Must be in ISO 8601 format.
                    # @param [Integer] limit Upper limit for the number of records to return. stream()
                    #    guarantees to never return more than limit.  Default is no limit
                    # @param [Integer] page_size Number of records to fetch per request, when
                    #    not set will use the default value of 50 records.  If no page_size is defined
                    #    but a limit is defined, stream() will attempt to read the limit with the most
                    #    efficient page size, i.e. min(limit, 1000)
                    # @return [Array] Array of up to limit results
                    def list(dest: :unset, trial_status: :unset, channel: :unset, configuration_id: :unset, authentication_id: :unset, country: :unset, sent_at: :unset, sent_after: :unset, sent_before: :unset, limit: nil, page_size: nil)
                        self.stream(
                            dest: dest,
                            trial_status: trial_status,
                            channel: channel,
                            configuration_id: configuration_id,
                            authentication_id: authentication_id,
                            country: country,
                            sent_at: sent_at,
                            sent_after: sent_after,
                            sent_before: sent_before,
                            limit: limit,
                            page_size: page_size
                        ).entries
                    end

                    ##
                    # Streams Instance records from the API as an Enumerable.
                    # This operation lazily loads records as efficiently as possible until the limit
                    # is reached.
                    # @param [String] dest Retrieve authentication trials sent only to this phone number or email. The phone number must be in the E.164 format.
                    # @param [String] trial_status Retrieve authentication trials with the specified status.
                    # @param [String] channel Retrieve authentication trials sent via the specified channel.
                    # @param [String] configuration_id Retrieve authentication trials from the configuration whose ID matches the specified one.
                    # @param [String] authentication_id Retrieve authentication trials from the authentication whose ID matches the specified one.
                    # @param [String] country Retrieve authentication trials sent to the specified destination country (in ISO 3166-1 alpha-2). Only possible when `dest` is a phone number.
                    # @param [Time] sent_at Retrieve only authentication trials created at the specified date. Must be in ISO 8601 format.
                    # @param [Time] sent_after Retrieve only authentication trials created after the specified datetime. Must be in ISO 8601 format.
                    # @param [Time] sent_before Retrieve only authentication trials created before the specified datetime. Must be in ISO 8601 format.
                    # @param [Integer] limit Upper limit for the number of records to return. stream()
                    #    guarantees to never return more than limit.  Default is no limit
                    # @param [Integer] page_size Number of records to fetch per request, when
                    #    not set will use the default value of 50 records.  If no page_size is defined
                    #    but a limit is defined, stream() will attempt to read the limit with the most
                    #    efficient page size, i.e. min(limit, 1000)
                    # @return [Enumerable] Enumerable that will yield up to limit results
                    def stream(dest: :unset, trial_status: :unset, channel: :unset, configuration_id: :unset, authentication_id: :unset, country: :unset, sent_at: :unset, sent_after: :unset, sent_before: :unset, limit: nil, page_size: nil)
                        limits = @version.read_limits(limit, page_size)

                        page = self.page(
                            dest: dest,
                            trial_status: trial_status,
                            channel: channel,
                            configuration_id: configuration_id,
                            authentication_id: authentication_id,
                            country: country,
                            sent_at: sent_at,
                            sent_after: sent_after,
                            sent_before: sent_before,
                            page_size: limits[:page_size], )

                        @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
                    end

                    ##
                    # When passed a block, yields AuthenticationTrialItemInstance records from the API.
                    # This operation lazily loads records as efficiently as possible until the limit
                    # is reached.
                    def each
                        limits = @version.read_limits

                        page = self.page(page_size: limits[:page_size], )

                        @version.stream(page,
                            limit: limits[:limit],
                            page_limit: limits[:page_limit]).each {|x| yield x}
                    end

                    ##
                    # Retrieve a single page of AuthenticationTrialItemInstance records from the API.
                    # Request is executed immediately.
                    # @param [String] dest Retrieve authentication trials sent only to this phone number or email. The phone number must be in the E.164 format.
                    # @param [String] trial_status Retrieve authentication trials with the specified status.
                    # @param [String] channel Retrieve authentication trials sent via the specified channel.
                    # @param [String] configuration_id Retrieve authentication trials from the configuration whose ID matches the specified one.
                    # @param [String] authentication_id Retrieve authentication trials from the authentication whose ID matches the specified one.
                    # @param [String] country Retrieve authentication trials sent to the specified destination country (in ISO 3166-1 alpha-2). Only possible when `dest` is a phone number.
                    # @param [Time] sent_at Retrieve only authentication trials created at the specified date. Must be in ISO 8601 format.
                    # @param [Time] sent_after Retrieve only authentication trials created after the specified datetime. Must be in ISO 8601 format.
                    # @param [Time] sent_before Retrieve only authentication trials created before the specified datetime. Must be in ISO 8601 format.
                    # @param [Integer] page_number Page Number, this value is simply for client state
                    # @param [Integer] page_size Number of records to return, defaults to 20
                    # @return [Page] Page of AuthenticationTrialItemInstance
                    def page(dest: :unset, trial_status: :unset, channel: :unset, configuration_id: :unset, authentication_id: :unset, country: :unset, sent_at: :unset, sent_after: :unset, sent_before: :unset, page_token: :unset, page_number: :unset, page_size: :unset)
                        params = Reach::Values.of({
                            
                            'dest' => dest,
                            
                            'trialStatus' => trial_status,
                            
                            'channel' => channel,
                            
                            'configurationId' => configuration_id,
                            
                            'authenticationId' => authentication_id,
                            
                            'country' => country,
                            
                            'sentAt' =>  Reach.serialize_iso8601_datetime(sent_at),
                            
                            'sentAfter' =>  Reach.serialize_iso8601_datetime(sent_after),
                            
                            'sentBefore' =>  Reach.serialize_iso8601_datetime(sent_before),
                            
                            'page' => page_number,
                            'pageSize' => page_size,
                        })

                        baseUrl = @version.url_without_pagination_info(@version.absolute_url(@uri), params)
                        response = @version.page('GET', @uri, params: params)

                        AuthenticationTrialItemPage.new(baseUrl, @version, response, @solution)
                    end

                    ##
                    # Retrieve a single page of AuthenticationTrialItemInstance records from the API.
                    # Request is executed immediately.
                    # @param [String] target_url API-generated URL for the requested results page
                    # @return [Page] Page of AuthenticationTrialItemInstance
                    def get_page(target_url)
                        baseUrl = @version.url_without_pagination_info(target_url)
                        response = @version.domain.request(
                            'GET',
                            target_url
                        )
                    AuthenticationTrialItemPage.new(baseUrl, @version, response, @solution)
                    end
                    


                    # Provide a user friendly representation
                    def to_s
                        '#<Reach.Api.Authentix.AuthenticationTrialItemList>'
                    end
                end


                class AuthenticationTrialItemContext < InstanceContext
                    ##
                    # Initialize the AuthenticationTrialItemContext
                    # @param [Version] version Version that contains the resource
                    # @param [String] trial_id The identifier of the authentication trial to be fetched.
                    # @return [AuthenticationTrialItemContext] AuthenticationTrialItemContext
                    def initialize(version, trial_id)
                        super(version)

                        # Path Solution
                        @solution = { trial_id: trial_id,  }
                        @uri = "/authentix/v1/authenticationTrials/#{@solution[:trial_id]}"

                        
                    end
                    ##
                    # Fetch the AuthenticationTrialItemInstance
                    # @return [AuthenticationTrialItemInstance] Fetched AuthenticationTrialItemInstance
                    def fetch

                        baseParams = {
                        }
                        
                        
                        payload = @version.fetch('GET', @uri)
                        AuthenticationTrialItemInstance.new(
                            @version,
                            payload,
                            trial_id: @solution[:trial_id],
                        )
                    end


                    ##
                    # Provide a user friendly representation
                    def to_s
                        context = @solution.map{|k, v| "#{k}: #{v}"}.join(',')
                        "#<Reach.Api.Authentix.AuthenticationTrialItemContext #{context}>"
                    end

                    ##
                    # Provide a detailed, user friendly representation
                    def inspect
                        context = @solution.map{|k, v| "#{k}: #{v}"}.join(',')
                        "#<Reach.Api.Authentix.AuthenticationTrialItemContext #{context}>"
                    end
                end

                class AuthenticationTrialItemPage < Page
                    ##
                    # Initialize the AuthenticationTrialItemPage
                    # @param [String] baseUrl url without pagination info
                    # @param [Version] version Version that contains the resource
                    # @param [Response] response Response from the API
                    # @param [Hash] solution Path solution for the resource
                    # @return [AuthenticationTrialItemPage] AuthenticationTrialItemPage
                    def initialize(baseUrl, version, response, solution)
                        super(baseUrl, version, response)

                        # Path Solution
                        @solution = solution
                    end

                    ##
                    # Build an instance of AuthenticationTrialItemInstance
                    # @param [Hash] payload Payload response from the API
                    # @return [AuthenticationTrialItemInstance] AuthenticationTrialItemInstance
                    def get_instance(payload)
                        AuthenticationTrialItemInstance.new(@version, payload)
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        '<Reach.Api.Authentix.AuthenticationTrialItemPage>'
                    end
                end
                class AuthenticationTrialItemInstance < InstanceResource
                    ##
                    # Initialize the AuthenticationTrialItemInstance
                    # @param [Version] version Version that contains the resource
                    # @param [Hash] payload payload that contains response from Reach(TalkyLabs)
                    # @param [String] account_sid The SID of the
                    #   Account that created this AuthenticationTrialItem
                    #   resource.
                    # @param [String] sid The SID of the Call resource to fetch.
                    # @return [AuthenticationTrialItemInstance] AuthenticationTrialItemInstance
                    def initialize(version, payload , trial_id: nil)
                        super(version)
                        
                        # Marshaled Properties
                        @properties = { 
                            'appletId' => payload['appletId'],
                            'apiVersion' => payload['apiVersion'],
                            'configurationId' => payload['configurationId'],
                            'authenticationId' => payload['authenticationId'],
                            'trialId' => payload['trialId'],
                            'trialStatus' => payload['trialStatus'],
                            'channel' => payload['channel'],
                            'paymentInfo' => payload['paymentInfo'],
                            'dateCreated' => Reach.deserialize_iso8601_datetime(payload['dateCreated']),
                            'dateUpdated' => Reach.deserialize_iso8601_datetime(payload['dateUpdated']),
                            'price' => payload['price'],
                            'priceUnit' => payload['priceUnit'],
                            'channelInfo' => payload['channelInfo'],
                        }

                        # Context
                        @instance_context = nil
                        @params = { 'trial_id' => trial_id  || @properties['trialId']  , }
                    end

                    ##
                    # Generate an instance context for the instance, the context is capable of
                    # performing various actions.  All instance actions are proxied to the context
                    # @return [AuthenticationTrialItemContext] CallContext for this CallInstance
                    def context
                        unless @instance_context
                            @instance_context = AuthenticationTrialItemContext.new(@version , @params['trial_id'])
                        end
                        @instance_context
                    end
                    
                    ##
                    # @return [String] The identifier of the applet.
                    def appletId
                        @properties['appletId']
                    end
                    
                    ##
                    # @return [String] The API version.
                    def apiVersion
                        @properties['apiVersion']
                    end
                    
                    ##
                    # @return [String] The identifier of the configuration.
                    def configurationId
                        @properties['configurationId']
                    end
                    
                    ##
                    # @return [String] The identifier of the authentication.
                    def authenticationId
                        @properties['authenticationId']
                    end
                    
                    ##
                    # @return [String] The identifier of the authentication trial.
                    def trialId
                        @properties['trialId']
                    end
                    
                    ##
                    # @return [String] The status of the authentication.
                    def trialStatus
                        @properties['trialStatus']
                    end
                    
                    ##
                    # @return [String] The channel used.
                    def channel
                        @properties['channel']
                    end
                    
                    ##
                    # @return [PaymentInfo] 
                    def paymentInfo
                        @properties['paymentInfo']
                    end
                    
                    ##
                    # @return [Time] The date and time in GMT that the authentication trial was created. 
                    def dateCreated
                        @properties['dateCreated']
                    end
                    
                    ##
                    # @return [Time] The date and time in GMT that the authentication trial was last updated. 
                    def dateUpdated
                        @properties['dateUpdated']
                    end
                    
                    ##
                    # @return [Float] The cost billed for the authentication trial, in the currency specified by `priceUnit`. This cost does not include the cost for checking the correctness of the code.
                    def price
                        @properties['price']
                    end
                    
                    ##
                    # @return [String] The currency, in ISO 4127 format, in which price is measured. for example, usd, xaf, eur, cad.
                    def priceUnit
                        @properties['priceUnit']
                    end
                    
                    ##
                    # @return [Hash<String, Object>] channel specific information related to a trial.
                    def channelInfo
                        @properties['channelInfo']
                    end
                    
                    ##
                    # Fetch the AuthenticationTrialItemInstance
                    # @return [AuthenticationTrialItemInstance] Fetched AuthenticationTrialItemInstance
                    def fetch

                        context.fetch
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
                        "<Reach.Api.Authentix.AuthenticationTrialItemInstance #{values}>"
                    end

                    ##
                    # Provide a detailed, user friendly representation
                    def inspect
                        values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
                        "<Reach.Api.Authentix.AuthenticationTrialItemInstance #{values}>"
                    end
                end

            end
        end
    end
end
