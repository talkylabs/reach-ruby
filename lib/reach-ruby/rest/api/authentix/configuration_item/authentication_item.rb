##
#    This code was generated by
#  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___ 
# | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
# |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
# |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
# 
#    Reach Authentix API
#     Reach Authentix API helps you easily integrate user authentification in your application. The authentification allows to verify that a user is indeed at the origin of a request from your application.  At the moment, the Reach Authentix API supports the following channels:    * SMS      * Email   We are continuously working to add additionnal channels. ## Base URL All endpoints described in this documentation are relative to the following base URL: ``` https://api.reach.talkylabs.com/rest/authentix/v1/ ```  The API is provided over HTTPS protocol to ensure data privacy.  ## API Authentication Requests made to the API must be authenticated. You need to provide the `ApiUser` and `ApiKey` associated with your applet. This information could be found in the settings of the applet. ```curl curl -X GET [BASE_URL]/configurations -H \"ApiUser:[Your_Api_User]\" -H \"ApiKey:[Your_Api_Key]\" ``` ## Reach Authentix API Workflow Three steps are needed in order to authenticate a given user using the Reach Authentix API. ### Step 1: Create an Authentix configuration A configuration is a set of settings used to define and send an authentication code to a user. This includes, for example: ```   - the length of the authentication code,    - the message template,    - and so on... ``` A configuaration could be created via the web application or directly using the Reach Authentix API. This step does not need to be performed every time one wants to use the Reach Authentix API. Indeed, once created, a configuartion could be used to authenticate several users in the future.    ### Step 2: Send an authentication code A configuration is used to send an authentication code via a selected channel to a user. For now, the supported channels are `sms`, and `email`. We are working hard to support additional channels. Newly created authentications will have a status of `awaiting`. ### Step 3: Verify the authentication code This step allows to verify that the code submitted by the user matched the one sent previously. If, there is a match, then the status of the authentication changes from `awaiting` to `passed`. Otherwise, the status remains `awaiting` until either it is verified or it expires. In the latter case, the status becomes `expired`. 
#
#    NOTE: This class is auto generated by OpenAPI Generator.
#    https://openapi-generator.tech
#    Do not edit the class manually.
#


module Reach
    module REST
        class Api
            class Authentix < Version
                class ConfigurationItemContext < InstanceContext

                     class AuthenticationItemList < ListResource
                    ##
                    # Initialize the AuthenticationItemList
                    # @param [Version] version Version that contains the resource
                    # @return [AuthenticationItemList] AuthenticationItemList
                    def initialize(version, configuration_id: nil)
                        super(version)
                        # Path Solution
                        @solution = { configuration_id: configuration_id }
                        @uri = "/authentix/v1/configurations/#{@solution[:configuration_id]}/authentications"
                        
                    end
                    ##
                    # Start the AuthenticationItemInstance
                    # @param [String] dest The phone number or email where to send the authentication code. Phone numbers must be in E.164 format.
                    # @param [String] channel The channel by which the authentication code is sent.
                    # @param [String] service_name a service name overwriting the one defined in the configuration.
                    # @param [String] custom_code the pre-generated code to be sent. Its length should be between 4 and 10 inclusive.
                    # @param [String] payment_info Information related to the digital payment to authenticate. It is required when `usedForDigitalPayment` is true. It is ignored otherwise. It is a stringfied JSON map where keys are `payee`, `amount`, and `currency` and the associated values are respectively the payee, the amount, and the currency of a financial transaction. 
                    # @param [String] template_id This is the ID of the message template to use for sending the authenetication code. It could be an sms or email template depending on the channel being used. It overwirites the template ID defined in the configuration if any. 
                    # @param [String] template_data_map A stringfied JSON map where keys are message template parameters and the values are the parameter values to be used when sending the authentication code. It may also be used to provide additional parameters for sending email based authentications such as the email used for sending the code.
                    # @return [AuthenticationItemInstance] Startd AuthenticationItemInstance
                    def start(
                        dest: nil, 
                        channel: nil, 
                        service_name: :unset, 
                        custom_code: :unset, 
                        payment_info: :unset, 
                        template_id: :unset, 
                        template_data_map: :unset
                    )

                        baseParams = {
                        }
                        data = Reach::Values.of(baseParams.merge({                        
                            'dest' => dest,
                            'channel' => channel,
                            'serviceName' => service_name,
                            'customCode' => custom_code,
                            'paymentInfo' => payment_info,
                            'templateId' => template_id,
                            'templateDataMap' => template_data_map,
                        }))

                        
                        
                        payload = @version.start('POST', @uri, data: data)
                        AuthenticationItemInstance.new(
                            @version,
                            payload,
                            configuration_id: @solution[:configuration_id],
                        )
                    end

                
                    ##
                    # Lists AuthenticationItemInstance records from the API as a list.
                    # Unlike stream(), this operation is eager and will load `limit` records into
                    # memory before returning.
                    # @param [Integer] limit Upper limit for the number of records to return. stream()
                    #    guarantees to never return more than limit.  Default is no limit
                    # @param [Integer] page_size Number of records to fetch per request, when
                    #    not set will use the default value of 50 records.  If no page_size is defined
                    #    but a limit is defined, stream() will attempt to read the limit with the most
                    #    efficient page size, i.e. min(limit, 1000)
                    # @return [Array] Array of up to limit results
                    def list(limit: nil, page_size: nil)
                        self.stream(
                            limit: limit,
                            page_size: page_size
                        ).entries
                    end

                    ##
                    # Streams Instance records from the API as an Enumerable.
                    # This operation lazily loads records as efficiently as possible until the limit
                    # is reached.
                    # @param [Integer] limit Upper limit for the number of records to return. stream()
                    #    guarantees to never return more than limit.  Default is no limit
                    # @param [Integer] page_size Number of records to fetch per request, when
                    #    not set will use the default value of 50 records.  If no page_size is defined
                    #    but a limit is defined, stream() will attempt to read the limit with the most
                    #    efficient page size, i.e. min(limit, 1000)
                    # @return [Enumerable] Enumerable that will yield up to limit results
                    def stream(limit: nil, page_size: nil)
                        limits = @version.read_limits(limit, page_size)

                        page = self.page(
                            page_size: limits[:page_size], )

                        @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
                    end

                    ##
                    # When passed a block, yields AuthenticationItemInstance records from the API.
                    # This operation lazily loads records as efficiently as possible until the limit
                    # is reached.
                    def each
                        limits = @version.read_limits

                        page = self.page(page_size: limits[:page_size], )

                        @version.stream(page,
                            limit: limits[:limit],
                            page_limit: limits[:page_limit]).each {|x| yield x}
                    end

                    ##
                    # Retrieve a single page of AuthenticationItemInstance records from the API.
                    # Request is executed immediately.
                    # @param [Integer] page_number Page Number, this value is simply for client state
                    # @param [Integer] page_size Number of records to return, defaults to 20
                    # @return [Page] Page of AuthenticationItemInstance
                    def page(page_token: :unset, page_number: :unset, page_size: :unset)
                        params = Reach::Values.of({
                            
                            'page' => page_number,
                            'pageSize' => page_size,
                        })

                        baseUrl = @version.url_without_pagination_info(@version.absolute_url(@uri), params)
                        response = @version.page('GET', @uri, params: params)

                        AuthenticationItemPage.new(baseUrl, @version, response, @solution)
                    end

                    ##
                    # Retrieve a single page of AuthenticationItemInstance records from the API.
                    # Request is executed immediately.
                    # @param [String] target_url API-generated URL for the requested results page
                    # @return [Page] Page of AuthenticationItemInstance
                    def get_page(target_url)
                        baseUrl = @version.url_without_pagination_info(target_url)
                        response = @version.domain.request(
                            'GET',
                            target_url
                        )
                    AuthenticationItemPage.new(baseUrl, @version, response, @solution)
                    end
                    


                    # Provide a user friendly representation
                    def to_s
                        '#<Reach.Api.Authentix.AuthenticationItemList>'
                    end
                end


                class AuthenticationItemContext < InstanceContext
                    ##
                    # Initialize the AuthenticationItemContext
                    # @param [Version] version Version that contains the resource
                    # @param [String] configuration_id The identifier of the configuration being used.
                    # @param [String] authentication_id The identifier of the authentication to be updated.
                    # @return [AuthenticationItemContext] AuthenticationItemContext
                    def initialize(version, configuration_id, authentication_id)
                        super(version)

                        # Path Solution
                        @solution = { configuration_id: configuration_id, authentication_id: authentication_id,  }
                        @uri = "/authentix/v1/configurations/#{@solution[:configuration_id]}/authentications/#{@solution[:authentication_id]}"

                        
                    end
                    ##
                    # Fetch the AuthenticationItemInstance
                    # @return [AuthenticationItemInstance] Fetched AuthenticationItemInstance
                    def fetch

                        baseParams = {
                        }
                        
                        
                        payload = @version.fetch('GET', @uri)
                        AuthenticationItemInstance.new(
                            @version,
                            payload,
                            configuration_id: @solution[:configuration_id],
                            authentication_id: @solution[:authentication_id],
                        )
                    end

                    ##
                    # Update the AuthenticationItemInstance
                    # @param [String] status The new status of the authentication.
                    # @return [AuthenticationItemInstance] Updated AuthenticationItemInstance
                    def update(
                        status: nil
                    )

                        baseParams = {
                        }
                        data = Reach::Values.of(baseParams.merge({                        
                            'status' => status,
                        }))

                        
                        
                        payload = @version.update('POST', @uri, data: data)
                        AuthenticationItemInstance.new(
                            @version,
                            payload,
                            configuration_id: @solution[:configuration_id],
                            authentication_id: @solution[:authentication_id],
                        )
                    end


                    ##
                    # Provide a user friendly representation
                    def to_s
                        context = @solution.map{|k, v| "#{k}: #{v}"}.join(',')
                        "#<Reach.Api.Authentix.AuthenticationItemContext #{context}>"
                    end

                    ##
                    # Provide a detailed, user friendly representation
                    def inspect
                        context = @solution.map{|k, v| "#{k}: #{v}"}.join(',')
                        "#<Reach.Api.Authentix.AuthenticationItemContext #{context}>"
                    end
                end

                class AuthenticationItemPage < Page
                    ##
                    # Initialize the AuthenticationItemPage
                    # @param [String] baseUrl url without pagination info
                    # @param [Version] version Version that contains the resource
                    # @param [Response] response Response from the API
                    # @param [Hash] solution Path solution for the resource
                    # @return [AuthenticationItemPage] AuthenticationItemPage
                    def initialize(baseUrl, version, response, solution)
                        super(baseUrl, version, response)

                        # Path Solution
                        @solution = solution
                    end

                    ##
                    # Build an instance of AuthenticationItemInstance
                    # @param [Hash] payload Payload response from the API
                    # @return [AuthenticationItemInstance] AuthenticationItemInstance
                    def get_instance(payload)
                        AuthenticationItemInstance.new(@version, payload, configuration_id: @solution[:configuration_id])
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        '<Reach.Api.Authentix.AuthenticationItemPage>'
                    end
                end
                class AuthenticationItemInstance < InstanceResource
                    ##
                    # Initialize the AuthenticationItemInstance
                    # @param [Version] version Version that contains the resource
                    # @param [Hash] payload payload that contains response from Reach(TalkyLabs)
                    # @param [String] account_sid The SID of the
                    #   Account that created this AuthenticationItem
                    #   resource.
                    # @param [String] sid The SID of the Call resource to fetch.
                    # @return [AuthenticationItemInstance] AuthenticationItemInstance
                    def initialize(version, payload , configuration_id: nil, authentication_id: nil)
                        super(version)
                        
                        # Marshaled Properties
                        @properties = { 
                            'appletId' => payload['appletId'],
                            'apiVersion' => payload['apiVersion'],
                            'configurationId' => payload['configurationId'],
                            'authenticationId' => payload['authenticationId'],
                            'status' => payload['status'],
                            'dest' => payload['dest'],
                            'channel' => payload['channel'],
                            'expiryTime' => payload['expiryTime'] == nil ? payload['expiryTime'] : payload['expiryTime'].to_i,
                            'maxTrials' => payload['maxTrials'] == nil ? payload['maxTrials'] : payload['maxTrials'].to_i,
                            'maxControls' => payload['maxControls'] == nil ? payload['maxControls'] : payload['maxControls'].to_i,
                            'paymentInfo' => payload['paymentInfo'],
                            'trials' => payload['trials'],
                            'dateCreated' => Reach.deserialize_iso8601_datetime(payload['dateCreated']),
                            'dateUpdated' => Reach.deserialize_iso8601_datetime(payload['dateUpdated']),
                        }

                        # Context
                        @instance_context = nil
                        @params = { 'configuration_id' => configuration_id  || @properties['configurationId']  ,'authentication_id' => authentication_id  || @properties['authenticationId']  , }
                    end

                    ##
                    # Generate an instance context for the instance, the context is capable of
                    # performing various actions.  All instance actions are proxied to the context
                    # @return [AuthenticationItemContext] CallContext for this CallInstance
                    def context
                        unless @instance_context
                            @instance_context = AuthenticationItemContext.new(@version , @params['configuration_id'], @params['authentication_id'])
                        end
                        @instance_context
                    end
                    
                    ##
                    # @return [String] The identifier of the applet.
                    def appletId
                        @properties['appletId']
                    end
                    
                    ##
                    # @return [String] The API version.
                    def apiVersion
                        @properties['apiVersion']
                    end
                    
                    ##
                    # @return [String] The identifier of the configuration.
                    def configurationId
                        @properties['configurationId']
                    end
                    
                    ##
                    # @return [String] The identifier of the authentication.
                    def authenticationId
                        @properties['authenticationId']
                    end
                    
                    ##
                    # @return [String] The status of the authentication.
                    def status
                        @properties['status']
                    end
                    
                    ##
                    # @return [String] The destination of the authentication code. Phone numbers must be in E.164 format.
                    def dest
                        @properties['dest']
                    end
                    
                    ##
                    # @return [String] The channel used.
                    def channel
                        @properties['channel']
                    end
                    
                    ##
                    # @return [String] An expiry time in minutes. 
                    def expiryTime
                        @properties['expiryTime']
                    end
                    
                    ##
                    # @return [String] The maximum number of trials. 
                    def maxTrials
                        @properties['maxTrials']
                    end
                    
                    ##
                    # @return [String] The maximum number of code controls. 
                    def maxControls
                        @properties['maxControls']
                    end
                    
                    ##
                    # @return [PaymentInfo] 
                    def paymentInfo
                        @properties['paymentInfo']
                    end
                    
                    ##
                    # @return [Array<TrialQuickInfo>] An array of authentication trials containing channel-specific information about each trial.
                    def trials
                        @properties['trials']
                    end
                    
                    ##
                    # @return [Time] The date and time in GMT that the authentication was created. 
                    def dateCreated
                        @properties['dateCreated']
                    end
                    
                    ##
                    # @return [Time] The date and time in GMT that the authentication was last updated. 
                    def dateUpdated
                        @properties['dateUpdated']
                    end
                    
                    ##
                    # Fetch the AuthenticationItemInstance
                    # @return [AuthenticationItemInstance] Fetched AuthenticationItemInstance
                    def fetch

                        context.fetch
                    end

                    ##
                    # Update the AuthenticationItemInstance
                    # @param [String] status The new status of the authentication.
                    # @return [AuthenticationItemInstance] Updated AuthenticationItemInstance
                    def update(
                        status: nil
                    )

                        context.update(
                            status: status, 
                        )
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
                        "<Reach.Api.Authentix.AuthenticationItemInstance #{values}>"
                    end

                    ##
                    # Provide a detailed, user friendly representation
                    def inspect
                        values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
                        "<Reach.Api.Authentix.AuthenticationItemInstance #{values}>"
                    end
                end

             end
            end
        end
    end
end


